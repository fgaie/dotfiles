;; -*- mode: yuck -*-

(deflisten hypr-monitors :initial "[]"
           `/home/flo/bin/hyprland.sh monitorsf`)

(deflisten hypr-workspaces :initial "[]"
           `/home/flo/bin/hyprland.sh workspacesf`)

(defpoll datetime :interval "1s" :initial "0"
         `date +%s`)

(defwindow bar-window-0
           :monitor 0
           :stacking "fg"
           :exclusive true
           :geometry (geometry
                      :height "100%"
                      :anchor "center left")
           (bar :id 0
                :monitors hypr-monitors
                :workspaces hypr-workspaces))

(defwindow bar-window-1
           :monitor 1
           :stacking "fg"
           :exclusive true
           :geometry (geometry
                      :height "100%"
                      :anchor "center left")
           (bar :id 1
                :monitors hypr-monitors
                :workspaces hypr-workspaces))

(defwidget bar [id monitors workspaces]
           (box :class "bar"
                (overlay
                 (box :orientation "v" :valign "start" :space-evenly false
                      (workspaces :workspaces {jq(workspaces, "map(select(.id > 0 and .monitorID == ${id}))")}
                                  :current {jq(monitors, ".[] | select(.id == ${id})").activeWorkspace.id}))

                 (box :orientation "v" :valign "center" :space-evenly false
                      (window :workspaces {jq(workspaces, "map(select(.id > 0 and .monitorID == ${id}))")}
                              :current {jq(monitors, ".[] | select(.id == ${id})").activeWorkspace.id}))

                 (box :orientation "v" :valign "end" :space-evenly false
                      (datetime :datetime datetime)))))

(defwidget workspaces [workspaces current]
           (box :class "workspaces"
                :orientation "v"
                :space-evenly false
                (for workspace in {jq(workspaces, "sort")}
                     (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
                               (box :class "workspace ${workspace.id == current ? 'selected' : ''}"
                                    (label :text {workspace.name}))))))

(defwidget window [workspaces current]
           (box :class "window"
                (label :angle 90
                       :text {substring(jq(workspaces, ".[] | select(.id == ${current})").lastwindowtitle, 0, 100)})))

(defwidget datetime [datetime]
           (box :class "datetime"
                :orientation "v"
                :space-evenly false
                (box :class "date"
                     :orientation "v"
                     :space-evenly false
                     (label :class "hours"
                            :text {formattime(datetime, "%y")})
                     (label :class "minutes"
                            :text {formattime(datetime, "%m")})
                     (label :class "minutes"
                            :text {formattime(datetime, "%d")}))

                (box :class "time"
                     :orientation "v"
                     :space-evenly false
                     (label :class "hours"
                            :text {formattime(datetime, "%H")})
                     (label :class "minutes"
                            :text {formattime(datetime, "%M")}))))
